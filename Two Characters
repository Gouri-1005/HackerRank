#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'alternate' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts STRING s as parameter.
 */

int alternate(string s) {
    int maxLen = 0;
    for (int a = 0; a < 26; ++a) {
        for (int b = a + 1; b < 26; ++b) {
            char ca = 'a' + a;
            char cb = 'a' + b;
            int prev = -1; // -1 = none, 0 = ca, 1 = cb
            int len = 0;
            bool valid = true;

            for (char c : s) {
                if (c == ca) {
                    if (prev == 0) { valid = false; break; }
                    prev = 0; ++len;
                } else if (c == cb) {
                    if (prev == 1) { valid = false; break; }
                    prev = 1; ++len;
                }
            }

            if (valid && len > 1) maxLen = max(maxLen, len);
        }
    }
    return maxLen;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string l_temp;
    getline(cin, l_temp);

    int l = stoi(ltrim(rtrim(l_temp)));

    string s;
    getline(cin, s);

    int result = alternate(s);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
